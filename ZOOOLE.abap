CLASS CL_OLE DEFINITION CREATE PUBLIC.
  PUBLIC SECTION.
    DATA:
      OBJ      TYPE OLE2_OBJECT,
      CHILDREN TYPE TABLE OF REF TO CL_OLE,
      PARENT   TYPE REF TO CL_OLE.
    METHODS:
      FREE_ALL,
      FREE,
      CONSTRUCTOR
        IMPORTING
          !E_PARENT TYPE REF TO CL_OLE OPTIONAL,
      SET_PROPERTY
        IMPORTING
          E_PROPERTY TYPE CHAR32
          E_VALUE    TYPE ANY,
      GET_PROPERTY
        IMPORTING
          E_PROPERTY TYPE CHAR32
        EXPORTING
          I_VALUE    TYPE ANY,
      CALL_METHOD
        IMPORTING
          E_METHOD TYPE C
          E_ARG1   TYPE ANY OPTIONAL
          E_ARG2   TYPE ANY OPTIONAL
          E_ARG3   TYPE ANY OPTIONAL
          E_ARG4   TYPE ANY OPTIONAL
          E_ARG5   TYPE ANY OPTIONAL
        CHANGING
          C_RETURN TYPE ANY OPTIONAL,
      CALL_METHOD_OF
        IMPORTING
          E_METHOD TYPE C
          E_ARG1   TYPE ANY OPTIONAL
          E_ARG2   TYPE ANY OPTIONAL
          E_ARG3   TYPE ANY OPTIONAL
          E_ARG4   TYPE ANY OPTIONAL
          E_ARG5   TYPE ANY OPTIONAL
        RETURNING VALUE(R_OBJ) TYPE REF TO CL_OLE,
      CREATE_OBJECT
        IMPORTING
          E_OBJ TYPE C.
ENDCLASS.

CLASS CL_OLE IMPLEMENTATION.
  METHOD FREE_ALL.
    LOOP AT CHILDREN INTO DATA(CHILD).
      CHILD->FREE_ALL( ).
    ENDLOOP.
    CLEAR CHILDREN.
    CLEAR PARENT.
    FREE( ).
  ENDMETHOD.

  METHOD CONSTRUCTOR.
    PARENT = E_PARENT.
  ENDMETHOD.

  METHOD CALL_METHOD_OF.
    CREATE OBJECT R_OBJ.
    APPEND R_OBJ TO CHILDREN.
    CALL_METHOD(
      EXPORTING
        E_METHOD = E_METHOD
        E_ARG1 = E_ARG1
        E_ARG2 = E_ARG2
        E_ARG3 = E_ARG3
        E_ARG4 = E_ARG4
        E_ARG5 = E_ARG5
      CHANGING
        C_RETURN = R_OBJ->OBJ ).
  ENDMETHOD.

  METHOD CALL_METHOD.
    IF E_ARG1 IS INITIAL.
      TRY.
          CALL METHOD OF OBJ E_METHOD = C_RETURN.
        CATCH CX_ROOT INTO DATA(LX_EXCEPTION).
          CALL METHOD OF OBJ E_METHOD.
      ENDTRY.
    ELSEIF E_ARG2 IS INITIAL.
      TRY.
          CALL METHOD OF OBJ E_METHOD = C_RETURN
            EXPORTING
              #1 = E_ARG1.
        CATCH CX_ROOT INTO LX_EXCEPTION.
          CALL METHOD OF OBJ E_METHOD
            EXPORTING
              #1 = E_ARG1.
      ENDTRY.
    ELSEIF E_ARG3 IS INITIAL.
      TRY.
          CALL METHOD OF OBJ E_METHOD = C_RETURN
            EXPORTING
              #1 = E_ARG1
              #2 = E_ARG2.
        CATCH CX_ROOT INTO LX_EXCEPTION.
          CALL METHOD OF OBJ E_METHOD
            EXPORTING
              #1 = E_ARG1
              #2 = E_ARG2.
      ENDTRY.
    ELSEIF E_ARG4 IS INITIAL.
      TRY.
          CALL METHOD OF OBJ E_METHOD = C_RETURN
            EXPORTING
              #1 = E_ARG1
              #2 = E_ARG2
              #3 = E_ARG3.
        CATCH CX_ROOT INTO LX_EXCEPTION.
          CALL METHOD OF OBJ E_METHOD
            EXPORTING
              #1 = E_ARG1
              #2 = E_ARG2
              #3 = E_ARG3.
      ENDTRY.
    ELSEIF E_ARG5 IS INITIAL.
      TRY.
          CALL METHOD OF OBJ E_METHOD = C_RETURN
            EXPORTING
              #1 = E_ARG1
              #2 = E_ARG2
              #3 = E_ARG3
              #4 = E_ARG4.
        CATCH CX_ROOT INTO LX_EXCEPTION.
          CALL METHOD OF OBJ E_METHOD
            EXPORTING
              #1 = E_ARG1
              #2 = E_ARG2
              #3 = E_ARG3
              #4 = E_ARG4.
      ENDTRY.
    ELSE.
      TRY.
          CALL METHOD OF OBJ E_METHOD = C_RETURN
            EXPORTING
              #1 = E_ARG1
              #2 = E_ARG2
              #3 = E_ARG3
              #4 = E_ARG4
              #5 = E_ARG5.
        CATCH CX_ROOT INTO LX_EXCEPTION.
          CALL METHOD OF OBJ E_METHOD
            EXPORTING
              #1 = E_ARG1
              #2 = E_ARG2
              #3 = E_ARG3
              #4 = E_ARG4
              #5 = E_ARG5.
      ENDTRY.
    ENDIF.
  ENDMETHOD.

  METHOD CREATE_OBJECT.
    CREATE OBJECT OBJ E_OBJ.
  ENDMETHOD.

  METHOD FREE.
    FREE OBJECT OBJ.
  ENDMETHOD.

  METHOD GET_PROPERTY.
    GET PROPERTY OF OBJ E_PROPERTY = I_VALUE.
  ENDMETHOD.

  METHOD SET_PROPERTY.
    SET PROPERTY OF OBJ E_PROPERTY = E_VALUE.
  ENDMETHOD.
ENDCLASS.

CLASS CL_OLE_WORKBOOK DEFINITION
  INHERITING FROM CL_OLE
  CREATE PUBLIC .

  PUBLIC SECTION.
  PROTECTED SECTION.
  PRIVATE SECTION.
ENDCLASS.

CLASS CL_OLE_WORKBOOK IMPLEMENTATION.

ENDCLASS.

CLASS CL_OLE_WORKBOOKS DEFINITION
  INHERITING FROM CL_OLE
  CREATE PUBLIC .

  PUBLIC SECTION.
    METHODS:
      ADD
        RETURNING VALUE(R_OBJ) TYPE REF TO CL_OLE_WORKBOOK.
    METHODS OPEN
      IMPORTING
        E_PATH TYPE CHAR1024.

ENDCLASS.

CLASS CL_OLE_WORKBOOKS IMPLEMENTATION.
  METHOD OPEN.
    CALL_METHOD(
      EXPORTING
        E_METHOD = 'Open'
        E_ARG1 = E_PATH ).
  ENDMETHOD.

  METHOD ADD.
    CREATE OBJECT R_OBJ
      EXPORTING
        E_PARENT = ME.
    APPEND R_OBJ TO CHILDREN.
    CALL_METHOD(
      EXPORTING
        E_METHOD = 'Add'
      CHANGING
        C_RETURN = R_OBJ->OBJ ).
  ENDMETHOD.

ENDCLASS.

CLASS CL_OLE_FONT DEFINITION
  INHERITING FROM CL_OLE
  CREATE PUBLIC.

  PUBLIC SECTION.
    METHODS SETPROPERTY
      IMPORTING
        !E_NAME         TYPE CHAR32 OPTIONAL
        !E_BOLD         TYPE I OPTIONAL
        !E_SIZE         TYPE I OPTIONAL
        !E_COLOR        TYPE INT8 OPTIONAL
        !E_TINTANDSHADE TYPE I OPTIONAL
        !E_ITALIC       TYPE I OPTIONAL
        !E_UNDERLINE    TYPE I OPTIONAL.
ENDCLASS.

CLASS CL_OLE_FONT IMPLEMENTATION.
  METHOD SETPROPERTY.
    IF E_NAME IS NOT INITIAL.
      SET_PROPERTY(
        EXPORTING
          E_PROPERTY = 'Name'
          E_VALUE = E_NAME ).
    ENDIF.
    IF E_SIZE IS NOT INITIAL.
      SET_PROPERTY(
        EXPORTING
          E_PROPERTY = 'Size'
          E_VALUE = E_SIZE ).
    ENDIF.
    IF E_BOLD IS NOT INITIAL.
      SET_PROPERTY(
        EXPORTING
          E_PROPERTY = 'BOLD'
          E_VALUE = E_BOLD ).
    ENDIF.
    IF E_COLOR IS NOT INITIAL.
      SET_PROPERTY(
        EXPORTING
          E_PROPERTY = 'COLOR'
          E_VALUE = E_COLOR ).
    ENDIF.
    IF E_TINTANDSHADE IS NOT INITIAL.
      SET_PROPERTY(
        EXPORTING
          E_PROPERTY = 'TINTANDSHADE'
          E_VALUE = E_TINTANDSHADE ).
    ENDIF.
    IF E_ITALIC IS NOT INITIAL.
      SET_PROPERTY(
        EXPORTING
          E_PROPERTY = 'ITALIC'
          E_VALUE = E_ITALIC ).
    ENDIF.
    IF E_UNDERLINE IS NOT INITIAL.
      SET_PROPERTY(
        EXPORTING
          E_PROPERTY = 'UNDERLINE'
          E_VALUE = E_UNDERLINE ).
    ENDIF.
  ENDMETHOD.
ENDCLASS.

CLASS CL_OLE_INTERIOR DEFINITION
  INHERITING FROM CL_OLE
  CREATE PUBLIC.

  PUBLIC SECTION.
    METHODS SETPROPERTY
      IMPORTING
        !E_COLOR TYPE INT8 OPTIONAL.
ENDCLASS.

CLASS CL_OLE_INTERIOR IMPLEMENTATION.
  METHOD SETPROPERTY.
    IF E_COLOR IS NOT INITIAL.
      SET_PROPERTY(
        EXPORTING
          E_PROPERTY = 'COLOR'
          E_VALUE = E_COLOR ).
    ENDIF.
  ENDMETHOD.
ENDCLASS.

CLASS CL_OLE_BORDERS DEFINITION
  INHERITING FROM CL_OLE
  CREATE PUBLIC.

  PUBLIC SECTION.
    METHODS SETPROPERTY
      IMPORTING
        !E_LINESTYLE TYPE C OPTIONAL
        !E_WEIGHT TYPE I OPTIONAL.
ENDCLASS.

CLASS CL_OLE_BORDERS IMPLEMENTATION.
  METHOD SETPROPERTY.
    IF E_LINESTYLE IS NOT INITIAL.
      SET_PROPERTY(
        EXPORTING
          E_PROPERTY = 'LINESTYLE'
          E_VALUE = E_LINESTYLE ).
    ENDIF.
    IF E_WEIGHT IS NOT INITIAL.
      SET_PROPERTY(
        EXPORTING
          E_PROPERTY = 'WEIGHT'
          E_VALUE = E_WEIGHT ).
    ENDIF.
  ENDMETHOD.
ENDCLASS.

CLASS CL_OLE_RANGE DEFINITION
  INHERITING FROM CL_OLE
  CREATE PUBLIC.

  PUBLIC SECTION.
    METHODS INSERT.
    METHODS DELETE.
    METHODS FONT
      RETURNING VALUE(R_OBJ) TYPE REF TO CL_OLE_FONT.
    METHODS SELECT.
    METHODS INTERIOR
      RETURNING VALUE(R_OBJ) TYPE REF TO CL_OLE_INTERIOR.
    METHODS BORDERS
      IMPORTING
        E_BORDER TYPE C
      RETURNING VALUE(R_OBJ) TYPE REF TO CL_OLE_BORDERS.
    METHODS SETPROPERTY
      IMPORTING
        !E_NUMBERFORMAT TYPE CHAR1024 OPTIONAL.
ENDCLASS.

CLASS CL_OLE_RANGE IMPLEMENTATION.
  METHOD SETPROPERTY.
    IF E_NUMBERFORMAT IS NOT INITIAL.
      SET_PROPERTY(
        EXPORTING
          E_PROPERTY = 'NUMBERFORMAT'
          E_VALUE = E_NUMBERFORMAT ).
    ENDIF.
  ENDMETHOD.

  METHOD BORDERS.
    CREATE OBJECT R_OBJ.
    APPEND R_OBJ TO CHILDREN.
    CALL_METHOD(
      EXPORTING
        E_METHOD = 'BORDERS'
        E_ARG1 = E_BORDER
      CHANGING
        C_RETURN = R_OBJ->OBJ ).
  ENDMETHOD.

  METHOD INTERIOR.
    CREATE OBJECT R_OBJ.
    APPEND R_OBJ TO CHILDREN.
    CALL_METHOD(
      EXPORTING
        E_METHOD = 'INTERIOR'
      CHANGING
        C_RETURN = R_OBJ->OBJ ).
  ENDMETHOD.
  METHOD SELECT.
    CALL_METHOD(
      EXPORTING
        E_METHOD = 'SELECT' ).
  ENDMETHOD.
  METHOD INSERT.
    CALL_METHOD(
      EXPORTING
        E_METHOD = 'Insert' ).
  ENDMETHOD.

  METHOD DELETE.
    CALL_METHOD(
      EXPORTING
        E_METHOD = 'DELETE' ).
  ENDMETHOD.

  METHOD FONT.
    CREATE OBJECT R_OBJ.
    APPEND R_OBJ TO CHILDREN.
    CALL_METHOD(
      EXPORTING
        E_METHOD = 'FONT'
      CHANGING
        C_RETURN = R_OBJ->OBJ ).
  ENDMETHOD.
ENDCLASS.

CLASS CL_OLE_CELL DEFINITION
  INHERITING FROM CL_OLE_RANGE
  CREATE PUBLIC.
  PUBLIC SECTION.
    METHODS VALUE
      IMPORTING
        E_VALUE TYPE CHAR1024.
ENDCLASS.

CLASS CL_OLE_CELL IMPLEMENTATION.
  METHOD VALUE.
    SET_PROPERTY(
      EXPORTING
        E_PROPERTY = 'VALUE'
        E_VALUE = E_VALUE ).
  ENDMETHOD.
ENDCLASS.

CLASS CL_OLE_ROW DEFINITION
  INHERITING FROM CL_OLE_RANGE
  CREATE PUBLIC.

  PUBLIC SECTION.

ENDCLASS.

CLASS CL_OLE_ROW IMPLEMENTATION.

ENDCLASS.

CLASS CL_OLE_COLUMN DEFINITION
  INHERITING FROM CL_OLE_RANGE
  CREATE PUBLIC.

  PUBLIC SECTION.

ENDCLASS.

CLASS CL_OLE_COLUMN IMPLEMENTATION.

ENDCLASS.

CLASS CL_OLE_SHEET DEFINITION
  INHERITING FROM CL_OLE
  CREATE PUBLIC .

  PUBLIC SECTION.
    METHODS CELLS
      IMPORTING
                !E_ROW       TYPE I
                !E_COL       TYPE I
      RETURNING VALUE(R_OBJ) TYPE REF TO CL_OLE_CELL.
    METHODS ACTIVATE.
    METHODS ROWS
      IMPORTING
                !E_INDEX     TYPE I
      RETURNING VALUE(R_OBJ) TYPE REF TO CL_OLE_ROW.
    METHODS COLUMNS
      IMPORTING
                !E_INDEX     TYPE I
      RETURNING VALUE(R_OBJ) TYPE REF TO CL_OLE_COLUMN.
    METHODS SETPROPERTY
      IMPORTING
        !E_NAME TYPE CHAR1024 OPTIONAL.
    METHODS RANGE
      IMPORTING
        !E_CELL1 TYPE REF TO CL_OLE_CELL
        !E_CELL2 TYPE REF TO CL_OLE_CELL
        !E_RANGE TYPE CHAR32
      RETURNING VALUE(R_OBJ) TYPE REF TO CL_OLE_RANGE.
ENDCLASS.

CLASS CL_OLE_SHEET IMPLEMENTATION.
  METHOD SETPROPERTY.
    IF E_NAME IS NOT INITIAL.
      SET_PROPERTY(
        EXPORTING
          E_PROPERTY = 'NAME'
          E_VALUE = E_NAME ).
    ENDIF.
  ENDMETHOD.

  METHOD RANGE.
    IF E_RANGE IS NOT INITIAL.
      CREATE OBJECT R_OBJ
        EXPORTING
          E_PARENT = ME.
      APPEND R_OBJ TO CHILDREN.
      CALL_METHOD(
        EXPORTING
          E_METHOD = 'RANGE'
          E_ARG1 = E_RANGE
        CHANGING
          C_RETURN = R_OBJ->OBJ ).
    ELSEIF E_CELL1 IS NOT INITIAL AND E_CELL2 IS NOT INITIAL.
      CREATE OBJECT R_OBJ
        EXPORTING
          E_PARENT = ME.
      APPEND R_OBJ TO CHILDREN.
      CALL_METHOD(
        EXPORTING
          E_METHOD = 'RANGE'
          E_ARG1 = E_CELL1->OBJ
          E_ARG2 = E_CELL2->OBJ
        CHANGING
          C_RETURN = R_OBJ->OBJ ).
    ENDIF.
  ENDMETHOD.

  METHOD ROWS.
    CREATE OBJECT R_OBJ
      EXPORTING
        E_PARENT = ME.
    APPEND R_OBJ TO CHILDREN.
    CALL_METHOD(
      EXPORTING
        E_METHOD = 'Rows'
        E_ARG1 = E_INDEX
      CHANGING
        C_RETURN = R_OBJ->OBJ ).
  ENDMETHOD.

  METHOD COLUMNS.
    CREATE OBJECT R_OBJ
      EXPORTING
        E_PARENT = ME.
    APPEND R_OBJ TO CHILDREN.
    CALL_METHOD(
      EXPORTING
        E_METHOD = 'COLUMNS'
        E_ARG1 = E_INDEX
      CHANGING
        C_RETURN = R_OBJ->OBJ ).
  ENDMETHOD.

  METHOD ACTIVATE.
    CALL_METHOD(
      EXPORTING
        E_METHOD =  'Activate' ).
  ENDMETHOD.

  METHOD CELLS.
    CREATE OBJECT R_OBJ
      EXPORTING
        E_PARENT = ME.
    APPEND R_OBJ TO CHILDREN.
    CALL_METHOD(
      EXPORTING
        E_METHOD = 'Cells'
        E_ARG1 = E_ROW
        E_ARG2 = E_COL
      CHANGING
        C_RETURN = R_OBJ->OBJ ).
  ENDMETHOD.
ENDCLASS.

CLASS CL_OLE_EXCEL DEFINITION
  INHERITING FROM CL_OLE
  CREATE PUBLIC .

  PUBLIC SECTION.

    METHODS CONSTRUCTOR.
    METHODS WORKBOOKS
      RETURNING
        VALUE(R_OBJ) TYPE REF TO CL_OLE_WORKBOOKS.
    METHODS ACTIVESHEET
      RETURNING
        VALUE(R_OBJ) TYPE REF TO CL_OLE_SHEET.
    METHODS QUIT.
    METHODS CELLS
      IMPORTING
                !E_ROW       TYPE I
                !E_COL       TYPE I
      RETURNING VALUE(R_OBJ) TYPE REF TO CL_OLE_CELL.
    METHODS WORKSHEETS
      IMPORTING
                E_INDEX      TYPE I
      RETURNING VALUE(R_OBJ) TYPE REF TO CL_OLE_SHEET.
    METHODS SAVEAS
      IMPORTING
        !E_PATH TYPE CHAR1024.
    METHODS SELECTION
      RETURNING VALUE(R_OBJ) TYPE REF TO CL_OLE_RANGE.
    METHODS RUN
      IMPORTING
        !E_MACRO TYPE CHAR1024.
    METHODS SETPROPERTY
      IMPORTING
        !E_TITLE               TYPE CHAR1024 OPTIONAL
        !E_VISIBLE             TYPE I OPTIONAL
        !E_SHEETSINNEWWORKBOOK TYPE I OPTIONAL.
ENDCLASS.

CLASS CL_OLE_EXCEL IMPLEMENTATION.
  METHOD SETPROPERTY.
    IF E_TITLE IS NOT INITIAL.
      SET_PROPERTY(
        EXPORTING
          E_PROPERTY = 'Caption'
          E_VALUE = E_TITLE ).
    ENDIF.
    IF E_VISIBLE IS NOT INITIAL.
      SET_PROPERTY(
        EXPORTING
          E_PROPERTY = 'VISIBLE'
          E_VALUE = E_VISIBLE ).
    ENDIF.
    IF E_SHEETSINNEWWORKBOOK IS NOT INITIAL.
      SET_PROPERTY(
        EXPORTING
          E_PROPERTY = 'SHEETSINNEWWORKBOOK'
          E_VALUE = E_SHEETSINNEWWORKBOOK ).
    ENDIF.
  ENDMETHOD.

  METHOD RUN.
    CALL_METHOD(
      EXPORTING
        E_METHOD = 'RUN'
        E_ARG1 = E_MACRO ).
  ENDMETHOD.

  METHOD SELECTION.
    CREATE OBJECT R_OBJ
      EXPORTING
        E_PARENT = ME.
    APPEND R_OBJ TO CHILDREN.
    CALL_METHOD(
      EXPORTING
        E_METHOD = 'SELECTION'
      CHANGING
        C_RETURN = R_OBJ->OBJ ).
  ENDMETHOD.

  METHOD SAVEAS.
    CALL_METHOD(
      EXPORTING
        E_METHOD = 'SAVEAS'
        E_ARG1 = E_PATH ).
  ENDMETHOD.
  METHOD WORKSHEETS.
    CREATE OBJECT R_OBJ
      EXPORTING
        E_PARENT = ME.
    APPEND R_OBJ TO CHILDREN.
    CALL_METHOD(
      EXPORTING
        E_METHOD =  'Sheets'
        E_ARG1 = E_INDEX
      CHANGING
        C_RETURN = R_OBJ->OBJ ).
  ENDMETHOD.

  METHOD ACTIVESHEET.
    CREATE OBJECT R_OBJ
      EXPORTING
        E_PARENT = ME.
    APPEND R_OBJ TO CHILDREN.
    GET_PROPERTY(
      EXPORTING
        E_PROPERTY = 'ACTIVESHEET'
      IMPORTING
        I_VALUE = R_OBJ->OBJ ).
  ENDMETHOD.

  METHOD CONSTRUCTOR.
    SUPER->CONSTRUCTOR( ).
    CREATE_OBJECT( 'Excel.Application' ).
  ENDMETHOD.

  METHOD WORKBOOKS.
    CREATE OBJECT R_OBJ
      EXPORTING
        E_PARENT = ME.
    APPEND R_OBJ TO CHILDREN.
    CALL_METHOD(
      EXPORTING
        E_METHOD = 'Workbooks'
      CHANGING
        C_RETURN = R_OBJ->OBJ ).
  ENDMETHOD.

  METHOD QUIT.
    CALL_METHOD(
      EXPORTING
        E_METHOD = 'QUIT' ).
    FREE_ALL( ).
  ENDMETHOD.

  METHOD CELLS.
    CREATE OBJECT R_OBJ.
    APPEND R_OBJ TO CHILDREN.
    CALL_METHOD(
      EXPORTING
        E_METHOD = 'Cells'
        E_ARG1 = E_ROW
        E_ARG2 = E_COL
      CHANGING
        C_RETURN = R_OBJ->OBJ ).
  ENDMETHOD.
ENDCLASS.
